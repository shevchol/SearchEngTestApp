package com.conductor.app.core.util;import java.util.LinkedHashMap;import java.util.Map;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.context.request.ServletWebRequest;import org.springframework.web.context.request.WebRequest;import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;import com.conductor.app.core.ResourceAlreadyExistsException;import com.conductor.app.core.ResourceNotFoundException;@ControllerAdvicepublic class RestExceptionHandler extends ResponseEntityExceptionHandler {		@ExceptionHandler(value = { IllegalArgumentException.class })	public ResponseEntity<Object> illegalArgumentHandle(IllegalArgumentException ex, ServletWebRequest request) {		return handleExceptionInternal(ex, getResponseMap("Illegal argument", ex, request), new HttpHeaders(),			HttpStatus.BAD_REQUEST, request);	}		@ExceptionHandler(value = { MethodArgumentTypeMismatchException.class, })	public ResponseEntity<Object> argumentTypeMismatchHandle(MethodArgumentTypeMismatchException ex, ServletWebRequest request) {		return handleExceptionInternal(ex, getResponseMap("Argument type mismatch.", ex, request), new HttpHeaders(),			HttpStatus.BAD_REQUEST, request);	}		@ExceptionHandler(ResourceAlreadyExistsException.class)	public ResponseEntity<Object> handleAlreadyExists(ResourceAlreadyExistsException ex, ServletWebRequest request) {		return handleExceptionInternal(ex, getResponseMap("Entity already exists", ex, request), new HttpHeaders(),			HttpStatus.CONFLICT, request);	}	@ExceptionHandler(ResourceNotFoundException.class)	public ResponseEntity<Object> handleNotFound(ResourceNotFoundException ex, ServletWebRequest request) {		return handleExceptionInternal(ex, getResponseMap("Entity Not Found.", ex, request), new HttpHeaders(),			HttpStatus.NOT_FOUND, request);	}		private Map<String, Object> getResponseMap(String error, Exception ex, WebRequest request) {		Map<String, Object> map = new LinkedHashMap<>();		map.put("error", error);		if (ex.getMessage() != null)			map.put("message", ex.getMessage());		if (request instanceof ServletWebRequest) {			map.put("path", ((ServletWebRequest) request).getRequest().getServletPath());		}		return map;	}}
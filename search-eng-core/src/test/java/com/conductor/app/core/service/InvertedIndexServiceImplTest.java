package com.conductor.app.core.service;import static org.mockito.Matchers.any;import static org.mockito.Matchers.anySet;import static org.mockito.Mockito.never;import static org.mockito.Mockito.only;import static org.mockito.Mockito.times;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.verifyNoMoreInteractions;import static org.testng.Assert.assertEquals;import static org.testng.Assert.assertTrue;import java.util.Collections;import java.util.Set;import java.util.stream.Collectors;import java.util.stream.Stream;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.mockito.Spy;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;import org.testng.annotations.BeforeMethod;import org.testng.annotations.Test;import com.conductor.app.core.model.Document;import com.conductor.app.core.repository.DocumentRepository;import com.conductor.app.core.service.tokenization.SimpleASCIITokenizer;import com.conductor.app.core.service.tokenization.WordTokenizer;public class InvertedIndexServiceImplTest {	@Spy	@InjectMocks	InvertedIndexServiceImpl indexService;	@Spy	SimpleASCIITokenizer wordTokenizer;	@BeforeMethod	private void initMocks() {		MockitoAnnotations.initMocks(this);	}	@Test	public void testSearchDocumentIdsEmptyTokenString(){		//Given		final String tokens = "";		//When		Set<Long> resultSet = indexService.searchDocumentIds(tokens);		//Then		assertEquals(resultSet, Collections.emptySet());		verify(wordTokenizer, times(1)).tokenize(tokens);		verify(indexService, times(1)).searchDocumentIds(tokens);		verify(indexService, times(1)).searchDocuments(Collections.emptySet());		verifyNoMoreInteractions(indexService);	}	@Test	public void testSearchDocumentIdsWhiteSpaceTokenString(){		//Given		final String tokens = "   ";		//When		Set<Long> resultSet = indexService.searchDocumentIds(tokens);		//Then		assertEquals(resultSet, Collections.emptySet());		verify(wordTokenizer, times(1)).tokenize(tokens);		verify(indexService, times(1)).searchDocumentIds(tokens);		verify(indexService, times(1)).searchDocuments(Collections.emptySet());		verifyNoMoreInteractions(indexService);	}	@Test	public void testSearchDocumentIdsSingleResults(){		//Given		final Long doc1ID = 1L;		final Long doc2ID = 2L;		final String text1 = "The impact of Java SE 9 on operations and development teams";		final String text2 = "Modular Development with Java SE 9";		Document document1 = new Document(doc1ID, text1);		Document document2 = new Document(doc2ID, text2);		indexService.updateIndexes(document1);		indexService.updateIndexes(document2);		Set<Long> expectedSet = Stream.of(doc1ID).collect(Collectors.toSet());		final String tokens = "impact of Java SE 9";		//When		Set<Long> resultSet = indexService.searchDocumentIds(tokens);		//Then		assertEquals(resultSet, expectedSet);		verify(indexService, times(1)).searchDocumentIds(tokens);		verify(indexService, times(1)).searchDocuments(anySet());		verify(indexService, times(2)).updateIndexes(any());		verifyNoMoreInteractions(indexService);	}	@Test	public void testSearchDocumentIdsMultipleResults(){		//Given		final Long doc1ID = 1L;		final Long doc2ID = 2L;		final String text1 = "The impact of Java SE 9 on operations and development teams";		final String text2 = "Modular Development with Java SE 9";		Document document1 = new Document(doc1ID, text1);		Document document2 = new Document(doc2ID, text2);		indexService.updateIndexes(document1);		indexService.updateIndexes(document2);		Set<Long> expectedSet = Stream.of(doc1ID, doc2ID).collect(Collectors.toSet());		final String tokens = "Java SE 9";		//When		Set<Long> resultSet = indexService.searchDocumentIds(tokens);		//Then		assertEquals(resultSet, expectedSet);		verify(indexService, times(1)).searchDocumentIds(tokens);		verify(indexService, times(1)).searchDocuments(anySet());		verify(indexService, times(2)).updateIndexes(any());		verifyNoMoreInteractions(indexService);	}	@Test	public void testUpdateIndexes(){		//Given		final Long doc1ID = 1L;		final String text1 = "Modular Development with Java SE 9";		final Document document1 = new Document(doc1ID, text1);		//when		indexService.updateIndexes(document1);		//then		verify(indexService, times(1)).updateIndexes(document1);		verify(wordTokenizer, times(1)).tokenize(text1);		verifyNoMoreInteractions(indexService);	}}
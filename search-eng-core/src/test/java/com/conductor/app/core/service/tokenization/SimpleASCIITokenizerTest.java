package com.conductor.app.core.service.tokenization;import static org.mockito.Matchers.any;import static org.mockito.Mockito.never;import static org.mockito.Mockito.only;import static org.mockito.Mockito.times;import static org.mockito.Mockito.verify;import static org.testng.Assert.assertEquals;import static org.testng.Assert.assertTrue;import java.util.List;import java.util.stream.Collectors;import java.util.stream.Stream;import org.mockito.MockitoAnnotations;import org.mockito.Spy;import org.testng.annotations.BeforeMethod;import org.testng.annotations.Test;public class SimpleASCIITokenizerTest {	@Spy	SimpleASCIITokenizer tokenizer = new SimpleASCIITokenizer();	@BeforeMethod	public void setUp() throws Exception {		MockitoAnnotations.initMocks(this);	}	@Test	public void testTokenizeNullString() {		List<String> tokenList = tokenizer.tokenize(null);		assertTrue(tokenList.isEmpty());		verify(tokenizer, never()).isAscii(any());	}	@Test(expectedExceptions = IllegalArgumentException.class)	public void testExceptionThrownIfNonAscii() {		tokenizer.tokenize("Київ");		verify(tokenizer, only()).isAscii("Київ");	}	@Test()	public void testTokenizeOK() {		List<String> expectedList = Stream.of("Requirements", "management", "and", "software", "integration", "Why", "one",			"cant", "live", "without", "the", "other").collect(Collectors.toList());		assertEquals(expectedList,			tokenizer.tokenize("Requirements management and software integration: Why one cant live without the other"));		assertEquals(expectedList,			tokenizer.tokenize("Requirements, management! and software integration: Why one;( cant live) without the& other"));		verify(tokenizer, times(2)).isAscii(any());	}}
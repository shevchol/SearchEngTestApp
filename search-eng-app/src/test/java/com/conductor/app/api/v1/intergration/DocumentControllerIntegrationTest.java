package com.conductor.app.api.v1.intergration;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;import java.io.IOException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.core.io.ClassPathResource;import org.springframework.http.MediaType;import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.util.StreamUtils;import org.springframework.web.context.WebApplicationContext;import org.testng.annotations.BeforeClass;import org.testng.annotations.BeforeMethod;import org.testng.annotations.Test;import com.conductor.app.core.repository.DocumentRepository;import com.google.common.base.Charsets;@SpringBootTestpublic class DocumentControllerIntegrationTest extends AbstractTestNGSpringContextTests {	private static final String PATH = "/api/v1/documents/";	private static final String LIST_PATH = "/api/v1/documents/list";	private static final int DEFAULT_DOC_ID = 1;	@Autowired	private WebApplicationContext webApplicationContext;	@Autowired	private DocumentRepository repository;	private MockMvc mockMvc;	@BeforeClass	public void setUp() throws Exception {		mockMvc = MockMvcBuilders			.webAppContextSetup(webApplicationContext)			.build();	}	@BeforeMethod	public void initDefaults() {		repository.clearDB();	}	@Test	public void testCreateDocument() throws Exception {		final String request = loadFileToString("document_request.json");		final String expectedResponse = loadFileToString("document_response.json");		// When		mockMvc.perform(post(PATH).contentType(MediaType.APPLICATION_JSON).content(request))			// Then			.andExpect(status().is(201))			.andExpect(content().json(expectedResponse));	}	@Test	public void testCreateDocumentWithExistingId() throws Exception {		final String request = loadFileToString("document_request.json");		//insert document first time		mockMvc.perform(post(PATH).contentType(MediaType.APPLICATION_JSON).content(request));		//insert document second time		mockMvc.perform(post(PATH).contentType(MediaType.APPLICATION_JSON).content(request))			// Then			.andExpect(status().is(409));	}	@Test	public void testCreateDocumentWithBadRequest() throws Exception {		final String badRequest = loadFileToString("bad_request.json");		//insert bad document time		mockMvc.perform(post(PATH).contentType(MediaType.APPLICATION_JSON).content(badRequest))			.andExpect(status().is(400));	}	@Test	public void testGetExistingDocument() throws Exception {		final String request = loadFileToString("document_request.json");		final String expectedResponse = loadFileToString("document_response.json");		//insert document		mockMvc.perform(post(PATH).contentType(MediaType.APPLICATION_JSON).content(request));		//retrieve document		mockMvc.perform(get(PATH + DEFAULT_DOC_ID).contentType(MediaType.APPLICATION_JSON))			// Then			.andExpect(status().is(200))			.andExpect(content().json(expectedResponse));	}	@Test	public void testGetNonExistingDocument() throws Exception {		//retrieve document		mockMvc.perform(get(PATH + DEFAULT_DOC_ID).contentType(MediaType.APPLICATION_JSON))			// Then			.andExpect(status().is(404))			.andExpect(content().json("{\"error\":\"Entity Not Found.\",\"path\":\"\"}"));	}	@Test	public void testGetListWithNonASCIITokenString() throws Exception {		//insert document		mockMvc.perform(post(LIST_PATH).contentType(MediaType.APPLICATION_JSON).content("КиїВ"))			.andExpect(status().is(400))			.andExpect(content().json("{\"error\":\"Illegal argument\",\"message\":\"Text is not pure ASCII\",\"path\":\"\"}"));	}	@Test	public void testGetList() throws Exception {		final String request1 = loadFileToString("document_request.json");		final String request2 = loadFileToString("another_document_request.json");		final String expectedResponse = loadFileToString("document_response.json");		//insert document		mockMvc.perform(post(PATH).contentType(MediaType.APPLICATION_JSON).content(request1));		//insert next		mockMvc.perform(post(PATH).contentType(MediaType.APPLICATION_JSON).content(request2));		//find documents with containing "TEST" and "BODY". Both should have those tokens		mockMvc.perform(post(LIST_PATH).contentType(MediaType.APPLICATION_JSON).content("TEST BODY"))			.andExpect(status().is(200))			.andExpect(content().json("[1 , 2]"));	}	@Test	public void testGetEmptyList() throws Exception {		final String request1 = loadFileToString("document_request.json");		final String request2 = loadFileToString("another_document_request.json");		final String expectedResponse = loadFileToString("document_response.json");		//insert document		mockMvc.perform(post(PATH).contentType(MediaType.APPLICATION_JSON).content(request1));		//insert next		mockMvc.perform(post(PATH).contentType(MediaType.APPLICATION_JSON).content(request2));		//insert document		mockMvc.perform(post(LIST_PATH).contentType(MediaType.APPLICATION_JSON).content("NOT THERE"))			.andExpect(status().is(200))			.andExpect(content().json("[]"));	}	private String loadFileToString(String file) throws IOException {		return StreamUtils.copyToString(new ClassPathResource(file).getInputStream(), Charsets.UTF_8);	}}
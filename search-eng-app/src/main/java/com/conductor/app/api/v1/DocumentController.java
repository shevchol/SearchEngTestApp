package com.conductor.app.api.v1;import java.util.Set;import javax.validation.Valid;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.servlet.support.ServletUriComponentsBuilder;import com.conductor.app.core.model.Document;import com.conductor.app.core.service.DocumentService;import com.conductor.app.core.service.IndexService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import io.swagger.annotations.ApiParam;import io.swagger.annotations.ApiResponse;import io.swagger.annotations.ApiResponses;@RestController@RequestMapping(value = "/api/v1/documents")@Api(value = "Search Eng REST API", description = "Operations with documents")public class DocumentController {		@Autowired	private DocumentService documentService;	@Autowired	private IndexService indexService;	@ApiOperation(value = "Returns a specified document by it id", produces = "application/json")	@RequestMapping(value = "/{docId}", method = RequestMethod.GET)	@ApiResponses({		@ApiResponse(code = 404, message = "if document with this is not found ")	})	public Document get(@ApiParam(value = "Document Id", required = true) @Valid @PathVariable Long docId	) {		return documentService.get(docId);	}		@ApiOperation(value = "Returns document IDs list by provided string of tokens", produces = "application/json")	@RequestMapping(value = "/list", method = RequestMethod.POST)	@ApiResponses({		@ApiResponse(code = 400, message = "If string of tokens is has non ASCII symbols")	})	public Set<Long> getList(@ApiParam(value = "Token string", required = true) @Valid @RequestBody String tokens) {		return indexService.searchDocumentIds(tokens);	}		@ApiOperation(value = "Creates new document", produces = "application/json")	@ApiResponses({		@ApiResponse(code = 409, message = "if document with this id already exists ")	})	@ResponseStatus(HttpStatus.CREATED)	@RequestMapping(value = "/", method = RequestMethod.POST)	public ResponseEntity<Document> create(@ApiParam(value = "Document object", required = true) @RequestBody Document document		) {		documentService.addDocument(document);		HttpHeaders headers = new HttpHeaders();		headers.setLocation(ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(document.getId()).toUri());		return new ResponseEntity<>(document, headers, HttpStatus.CREATED);	}}